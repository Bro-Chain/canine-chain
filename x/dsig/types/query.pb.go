// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dsig/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetUserUploadsRequest struct {
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
}

func (m *QueryGetUserUploadsRequest) Reset()         { *m = QueryGetUserUploadsRequest{} }
func (m *QueryGetUserUploadsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserUploadsRequest) ProtoMessage()    {}
func (*QueryGetUserUploadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{2}
}
func (m *QueryGetUserUploadsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserUploadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserUploadsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserUploadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserUploadsRequest.Merge(m, src)
}
func (m *QueryGetUserUploadsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserUploadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserUploadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserUploadsRequest proto.InternalMessageInfo

func (m *QueryGetUserUploadsRequest) GetFid() string {
	if m != nil {
		return m.Fid
	}
	return ""
}

type QueryGetUserUploadsResponse struct {
	UserUploads UserUploads `protobuf:"bytes,1,opt,name=userUploads,proto3" json:"userUploads"`
}

func (m *QueryGetUserUploadsResponse) Reset()         { *m = QueryGetUserUploadsResponse{} }
func (m *QueryGetUserUploadsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserUploadsResponse) ProtoMessage()    {}
func (*QueryGetUserUploadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{3}
}
func (m *QueryGetUserUploadsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserUploadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserUploadsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserUploadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserUploadsResponse.Merge(m, src)
}
func (m *QueryGetUserUploadsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserUploadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserUploadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserUploadsResponse proto.InternalMessageInfo

func (m *QueryGetUserUploadsResponse) GetUserUploads() UserUploads {
	if m != nil {
		return m.UserUploads
	}
	return UserUploads{}
}

type QueryAllUserUploadsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserUploadsRequest) Reset()         { *m = QueryAllUserUploadsRequest{} }
func (m *QueryAllUserUploadsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserUploadsRequest) ProtoMessage()    {}
func (*QueryAllUserUploadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{4}
}
func (m *QueryAllUserUploadsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserUploadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserUploadsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserUploadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserUploadsRequest.Merge(m, src)
}
func (m *QueryAllUserUploadsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserUploadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserUploadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserUploadsRequest proto.InternalMessageInfo

func (m *QueryAllUserUploadsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserUploadsResponse struct {
	UserUploads []UserUploads       `protobuf:"bytes,1,rep,name=userUploads,proto3" json:"userUploads"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserUploadsResponse) Reset()         { *m = QueryAllUserUploadsResponse{} }
func (m *QueryAllUserUploadsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserUploadsResponse) ProtoMessage()    {}
func (*QueryAllUserUploadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{5}
}
func (m *QueryAllUserUploadsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserUploadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserUploadsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserUploadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserUploadsResponse.Merge(m, src)
}
func (m *QueryAllUserUploadsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserUploadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserUploadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserUploadsResponse proto.InternalMessageInfo

func (m *QueryAllUserUploadsResponse) GetUserUploads() []UserUploads {
	if m != nil {
		return m.UserUploads
	}
	return nil
}

func (m *QueryAllUserUploadsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFormRequest struct {
	Ffid string `protobuf:"bytes,1,opt,name=ffid,proto3" json:"ffid,omitempty"`
}

func (m *QueryGetFormRequest) Reset()         { *m = QueryGetFormRequest{} }
func (m *QueryGetFormRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFormRequest) ProtoMessage()    {}
func (*QueryGetFormRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{6}
}
func (m *QueryGetFormRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFormRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFormRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFormRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFormRequest.Merge(m, src)
}
func (m *QueryGetFormRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFormRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFormRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFormRequest proto.InternalMessageInfo

func (m *QueryGetFormRequest) GetFfid() string {
	if m != nil {
		return m.Ffid
	}
	return ""
}

type QueryGetFormResponse struct {
	Form Form `protobuf:"bytes,1,opt,name=form,proto3" json:"form"`
}

func (m *QueryGetFormResponse) Reset()         { *m = QueryGetFormResponse{} }
func (m *QueryGetFormResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFormResponse) ProtoMessage()    {}
func (*QueryGetFormResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{7}
}
func (m *QueryGetFormResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFormResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFormResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFormResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFormResponse.Merge(m, src)
}
func (m *QueryGetFormResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFormResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFormResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFormResponse proto.InternalMessageInfo

func (m *QueryGetFormResponse) GetForm() Form {
	if m != nil {
		return m.Form
	}
	return Form{}
}

type QueryAllFormRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFormRequest) Reset()         { *m = QueryAllFormRequest{} }
func (m *QueryAllFormRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFormRequest) ProtoMessage()    {}
func (*QueryAllFormRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{8}
}
func (m *QueryAllFormRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFormRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFormRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFormRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFormRequest.Merge(m, src)
}
func (m *QueryAllFormRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFormRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFormRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFormRequest proto.InternalMessageInfo

func (m *QueryAllFormRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFormResponse struct {
	Form       []Form              `protobuf:"bytes,1,rep,name=form,proto3" json:"form"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFormResponse) Reset()         { *m = QueryAllFormResponse{} }
func (m *QueryAllFormResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFormResponse) ProtoMessage()    {}
func (*QueryAllFormResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e75012cf22d21223, []int{9}
}
func (m *QueryAllFormResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFormResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFormResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFormResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFormResponse.Merge(m, src)
}
func (m *QueryAllFormResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFormResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFormResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFormResponse proto.InternalMessageInfo

func (m *QueryAllFormResponse) GetForm() []Form {
	if m != nil {
		return m.Form
	}
	return nil
}

func (m *QueryAllFormResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "jackaldao.canine.dsig.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "jackaldao.canine.dsig.QueryParamsResponse")
	proto.RegisterType((*QueryGetUserUploadsRequest)(nil), "jackaldao.canine.dsig.QueryGetUserUploadsRequest")
	proto.RegisterType((*QueryGetUserUploadsResponse)(nil), "jackaldao.canine.dsig.QueryGetUserUploadsResponse")
	proto.RegisterType((*QueryAllUserUploadsRequest)(nil), "jackaldao.canine.dsig.QueryAllUserUploadsRequest")
	proto.RegisterType((*QueryAllUserUploadsResponse)(nil), "jackaldao.canine.dsig.QueryAllUserUploadsResponse")
	proto.RegisterType((*QueryGetFormRequest)(nil), "jackaldao.canine.dsig.QueryGetFormRequest")
	proto.RegisterType((*QueryGetFormResponse)(nil), "jackaldao.canine.dsig.QueryGetFormResponse")
	proto.RegisterType((*QueryAllFormRequest)(nil), "jackaldao.canine.dsig.QueryAllFormRequest")
	proto.RegisterType((*QueryAllFormResponse)(nil), "jackaldao.canine.dsig.QueryAllFormResponse")
}

func init() { proto.RegisterFile("dsig/query.proto", fileDescriptor_e75012cf22d21223) }

var fileDescriptor_e75012cf22d21223 = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xdd, 0x6a, 0x13, 0x4d,
	0x18, 0xc7, 0xb3, 0x6d, 0x9a, 0x97, 0x77, 0x02, 0xb6, 0x99, 0x46, 0xd3, 0x6e, 0xed, 0x46, 0x06,
	0xfc, 0x48, 0xc4, 0x1d, 0x12, 0xf1, 0xc8, 0xa3, 0x54, 0x68, 0x40, 0x10, 0x6a, 0xa0, 0x27, 0x82,
	0xc8, 0x24, 0x3b, 0x59, 0x57, 0x37, 0x3b, 0xdb, 0xfd, 0x10, 0x6b, 0x10, 0xc1, 0x2b, 0x10, 0x04,
	0x11, 0xbc, 0x0b, 0x0f, 0xbd, 0x82, 0x1e, 0x16, 0x3c, 0xf1, 0x48, 0x24, 0xf1, 0x42, 0x64, 0x67,
	0x26, 0x66, 0x92, 0x6e, 0x3e, 0x2a, 0x3d, 0x5b, 0x66, 0xfe, 0xcf, 0xf3, 0xfc, 0x9e, 0xaf, 0x59,
	0xb0, 0x61, 0x85, 0x8e, 0x8d, 0x8f, 0x62, 0x1a, 0x1c, 0x9b, 0x7e, 0xc0, 0x22, 0x06, 0x2f, 0xbf,
	0x20, 0x9d, 0x97, 0xc4, 0xb5, 0x08, 0x33, 0x3b, 0xc4, 0x73, 0x3c, 0x6a, 0x26, 0x12, 0xbd, 0x68,
	0x33, 0x9b, 0x71, 0x05, 0x4e, 0xbe, 0x84, 0x58, 0xbf, 0x6a, 0x33, 0x66, 0xbb, 0x14, 0x13, 0xdf,
	0xc1, 0xc4, 0xf3, 0x58, 0x44, 0x22, 0x87, 0x79, 0xa1, 0xbc, 0xad, 0x76, 0x58, 0xd8, 0x63, 0x21,
	0x6e, 0x93, 0x90, 0x8a, 0x18, 0xf8, 0x55, 0xad, 0x4d, 0x23, 0x52, 0xc3, 0x3e, 0xb1, 0x1d, 0x8f,
	0x8b, 0xa5, 0xb6, 0xc0, 0x41, 0x7c, 0x12, 0x90, 0xde, 0xc8, 0xbc, 0xc4, 0x8f, 0xe2, 0x90, 0x06,
	0xcf, 0x62, 0xdf, 0x65, 0xc4, 0x1a, 0x5d, 0xac, 0xf3, 0x8b, 0x2e, 0x0b, 0x7a, 0xe2, 0x00, 0x15,
	0x01, 0x7c, 0x9c, 0xb8, 0x3f, 0xe0, 0xe6, 0x2d, 0x7a, 0x14, 0xd3, 0x30, 0x42, 0x2d, 0xb0, 0x39,
	0x71, 0x1a, 0xfa, 0xcc, 0x0b, 0x29, 0xbc, 0x0f, 0x72, 0x22, 0xcc, 0x96, 0x76, 0x4d, 0xbb, 0x95,
	0xaf, 0xef, 0x9a, 0xa9, 0x19, 0x9b, 0xc2, 0x6c, 0x2f, 0x7b, 0xf2, 0xb3, 0x9c, 0x69, 0x49, 0x13,
	0x64, 0x02, 0x9d, 0xfb, 0x6c, 0xd2, 0xe8, 0x30, 0xa4, 0xc1, 0xa1, 0xe0, 0x92, 0x11, 0xe1, 0x06,
	0x58, 0xed, 0x3a, 0x16, 0xf7, 0xfb, 0x7f, 0x2b, 0xf9, 0x44, 0x0e, 0xd8, 0x49, 0xd5, 0x4b, 0x96,
	0x87, 0x20, 0x1f, 0x8f, 0x8f, 0x25, 0x10, 0x9a, 0x01, 0xa4, 0x38, 0x90, 0x54, 0xaa, 0x31, 0xb2,
	0x24, 0x5a, 0xc3, 0x75, 0x53, 0xd0, 0xf6, 0x01, 0x18, 0xd7, 0x5c, 0x06, 0xba, 0x61, 0x8a, 0x06,
	0x99, 0x49, 0x83, 0x4c, 0x31, 0x04, 0xb2, 0x41, 0xe6, 0x01, 0xb1, 0xa9, 0xb4, 0x6d, 0x29, 0x96,
	0xe8, 0xab, 0x26, 0x33, 0x9a, 0x0e, 0x33, 0x2b, 0xa3, 0xd5, 0x7f, 0xce, 0x08, 0x36, 0x27, 0x98,
	0x57, 0x38, 0xf3, 0xcd, 0x85, 0xcc, 0x02, 0x64, 0x02, 0xba, 0x22, 0x27, 0xa1, 0x49, 0xa3, 0x7d,
	0x16, 0xf4, 0x46, 0x35, 0x81, 0x20, 0xdb, 0x1d, 0xf7, 0x8b, 0x7f, 0xa3, 0x47, 0xa0, 0x38, 0x29,
	0x95, 0x79, 0xdd, 0x03, 0xd9, 0x64, 0xe0, 0x64, 0xe5, 0x76, 0x66, 0x24, 0x94, 0x98, 0xc8, 0x4c,
	0xb8, 0x1c, 0x3d, 0x95, 0x91, 0x1b, 0xae, 0xab, 0x46, 0xbe, 0xa8, 0x6e, 0x7c, 0xd2, 0x24, 0xee,
	0x5f, 0xff, 0x67, 0x70, 0x57, 0xcf, 0x81, 0x7b, 0x61, 0x15, 0xaf, 0x7f, 0x5b, 0x03, 0x6b, 0x1c,
	0x0c, 0xbe, 0x01, 0x39, 0xb1, 0x49, 0xb0, 0x32, 0x83, 0xe2, 0xec, 0xea, 0xea, 0xd5, 0x65, 0xa4,
	0x22, 0x2c, 0xda, 0x7e, 0xff, 0xfd, 0xf7, 0xc7, 0x95, 0x4d, 0x58, 0xc0, 0xfc, 0x59, 0x50, 0xde,
	0x11, 0xf8, 0x45, 0x03, 0x79, 0x65, 0xc6, 0x60, 0x6d, 0x9e, 0xdb, 0xd4, 0x95, 0xd6, 0xeb, 0xe7,
	0x31, 0x91, 0x44, 0xd7, 0x39, 0x51, 0x19, 0xee, 0x2a, 0x44, 0xea, 0x33, 0x86, 0xfb, 0x5d, 0xc7,
	0x7a, 0x0b, 0x3f, 0x6b, 0xe0, 0x92, 0x62, 0xde, 0x70, 0xdd, 0xf9, 0x80, 0xa9, 0x8b, 0x3d, 0x1f,
	0x30, 0x7d, 0x49, 0x51, 0x99, 0x03, 0x6e, 0xc3, 0xd2, 0x0c, 0x40, 0xf8, 0x0e, 0x64, 0x93, 0xd9,
	0x80, 0xd5, 0x05, 0xd9, 0x2b, 0x33, 0xad, 0xdf, 0x5e, 0x4a, 0x2b, 0x09, 0x0c, 0x4e, 0xb0, 0x05,
	0xaf, 0x28, 0x04, 0xc9, 0x04, 0xe2, 0x7e, 0x97, 0xd7, 0xa6, 0x0f, 0xfe, 0x4b, 0xf4, 0x49, 0x4d,
	0xaa, 0x0b, 0x12, 0x5c, 0x9a, 0x61, 0x6a, 0x47, 0x50, 0x89, 0x33, 0x14, 0xe0, 0xfa, 0x14, 0xc3,
	0xde, 0x83, 0x93, 0x81, 0xa1, 0x9d, 0x0e, 0x0c, 0xed, 0xd7, 0xc0, 0xd0, 0x3e, 0x0c, 0x8d, 0xcc,
	0xe9, 0xd0, 0xc8, 0xfc, 0x18, 0x1a, 0x99, 0x27, 0x15, 0xdb, 0x89, 0x9e, 0xc7, 0x6d, 0xb3, 0xc3,
	0x7a, 0x58, 0x44, 0xba, 0x63, 0x11, 0x86, 0x45, 0x28, 0xfc, 0x5a, 0xf8, 0x88, 0x8e, 0x7d, 0x1a,
	0xb6, 0x73, 0xfc, 0xd7, 0x74, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xb5, 0x5b, 0xaf,
	0x62, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a UserUploads by index.
	UserUploads(ctx context.Context, in *QueryGetUserUploadsRequest, opts ...grpc.CallOption) (*QueryGetUserUploadsResponse, error)
	// Queries a list of UserUploads items.
	UserUploadsAll(ctx context.Context, in *QueryAllUserUploadsRequest, opts ...grpc.CallOption) (*QueryAllUserUploadsResponse, error)
	// Queries a Form by index.
	Form(ctx context.Context, in *QueryGetFormRequest, opts ...grpc.CallOption) (*QueryGetFormResponse, error)
	// Queries a list of Form items.
	FormAll(ctx context.Context, in *QueryAllFormRequest, opts ...grpc.CallOption) (*QueryAllFormResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.dsig.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserUploads(ctx context.Context, in *QueryGetUserUploadsRequest, opts ...grpc.CallOption) (*QueryGetUserUploadsResponse, error) {
	out := new(QueryGetUserUploadsResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.dsig.Query/UserUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserUploadsAll(ctx context.Context, in *QueryAllUserUploadsRequest, opts ...grpc.CallOption) (*QueryAllUserUploadsResponse, error) {
	out := new(QueryAllUserUploadsResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.dsig.Query/UserUploadsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Form(ctx context.Context, in *QueryGetFormRequest, opts ...grpc.CallOption) (*QueryGetFormResponse, error) {
	out := new(QueryGetFormResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.dsig.Query/Form", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FormAll(ctx context.Context, in *QueryAllFormRequest, opts ...grpc.CallOption) (*QueryAllFormResponse, error) {
	out := new(QueryAllFormResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.dsig.Query/FormAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a UserUploads by index.
	UserUploads(context.Context, *QueryGetUserUploadsRequest) (*QueryGetUserUploadsResponse, error)
	// Queries a list of UserUploads items.
	UserUploadsAll(context.Context, *QueryAllUserUploadsRequest) (*QueryAllUserUploadsResponse, error)
	// Queries a Form by index.
	Form(context.Context, *QueryGetFormRequest) (*QueryGetFormResponse, error)
	// Queries a list of Form items.
	FormAll(context.Context, *QueryAllFormRequest) (*QueryAllFormResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserUploads(ctx context.Context, req *QueryGetUserUploadsRequest) (*QueryGetUserUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploads not implemented")
}
func (*UnimplementedQueryServer) UserUploadsAll(ctx context.Context, req *QueryAllUserUploadsRequest) (*QueryAllUserUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadsAll not implemented")
}
func (*UnimplementedQueryServer) Form(ctx context.Context, req *QueryGetFormRequest) (*QueryGetFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form not implemented")
}
func (*UnimplementedQueryServer) FormAll(ctx context.Context, req *QueryAllFormRequest) (*QueryAllFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.dsig.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.dsig.Query/UserUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserUploads(ctx, req.(*QueryGetUserUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserUploadsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserUploadsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.dsig.Query/UserUploadsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserUploadsAll(ctx, req.(*QueryAllUserUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Form_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Form(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.dsig.Query/Form",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Form(ctx, req.(*QueryGetFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FormAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FormAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.dsig.Query/FormAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FormAll(ctx, req.(*QueryAllFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jackaldao.canine.dsig.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserUploads",
			Handler:    _Query_UserUploads_Handler,
		},
		{
			MethodName: "UserUploadsAll",
			Handler:    _Query_UserUploadsAll_Handler,
		},
		{
			MethodName: "Form",
			Handler:    _Query_Form_Handler,
		},
		{
			MethodName: "FormAll",
			Handler:    _Query_FormAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsig/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserUploadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserUploadsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserUploadsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fid) > 0 {
		i -= len(m.Fid)
		copy(dAtA[i:], m.Fid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserUploadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserUploadsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserUploadsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserUploads.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserUploadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserUploadsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserUploadsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserUploadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserUploadsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserUploadsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserUploads) > 0 {
		for iNdEx := len(m.UserUploads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserUploads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFormRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFormRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFormRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ffid) > 0 {
		i -= len(m.Ffid)
		copy(dAtA[i:], m.Ffid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ffid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFormResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFormResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFormResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Form.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFormRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFormRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFormRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFormResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFormResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFormResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Form) > 0 {
		for iNdEx := len(m.Form) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Form[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserUploadsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserUploadsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserUploads.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserUploadsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserUploadsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserUploads) > 0 {
		for _, e := range m.UserUploads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFormRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ffid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFormResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Form.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFormRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFormResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Form) > 0 {
		for _, e := range m.Form {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserUploadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserUploadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserUploadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserUploadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserUploadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserUploadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUploads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserUploads.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserUploadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserUploadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserUploadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserUploadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserUploadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserUploadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUploads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUploads = append(m.UserUploads, UserUploads{})
			if err := m.UserUploads[len(m.UserUploads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFormRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFormRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFormRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ffid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ffid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFormResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFormResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFormResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Form.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFormRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFormRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFormRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFormResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFormResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFormResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = append(m.Form, Form{})
			if err := m.Form[len(m.Form)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
