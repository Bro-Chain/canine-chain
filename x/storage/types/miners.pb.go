// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/miners.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Miners struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ip              string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Totalspace      string `protobuf:"bytes,3,opt,name=totalspace,proto3" json:"totalspace,omitempty"`
	BurnedContracts string `protobuf:"bytes,4,opt,name=burned_contracts,json=burnedContracts,proto3" json:"burned_contracts,omitempty"`
	Creator         string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Miners) Reset()         { *m = Miners{} }
func (m *Miners) String() string { return proto.CompactTextString(m) }
func (*Miners) ProtoMessage()    {}
func (*Miners) Descriptor() ([]byte, []int) {
	return fileDescriptor_e39682370d0d17ec, []int{0}
}
func (m *Miners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Miners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Miners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Miners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Miners.Merge(m, src)
}
func (m *Miners) XXX_Size() int {
	return m.Size()
}
func (m *Miners) XXX_DiscardUnknown() {
	xxx_messageInfo_Miners.DiscardUnknown(m)
}

var xxx_messageInfo_Miners proto.InternalMessageInfo

func (m *Miners) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Miners) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Miners) GetTotalspace() string {
	if m != nil {
		return m.Totalspace
	}
	return ""
}

func (m *Miners) GetBurnedContracts() string {
	if m != nil {
		return m.BurnedContracts
	}
	return ""
}

func (m *Miners) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Miners)(nil), "jackaldao.canine.storage.Miners")
}

func init() { proto.RegisterFile("storage/miners.proto", fileDescriptor_e39682370d0d17ec) }

var fileDescriptor_e39682370d0d17ec = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4a, 0x04, 0x31,
	0x14, 0x45, 0x27, 0xa3, 0xae, 0x98, 0x42, 0x25, 0x58, 0xa4, 0x0a, 0x62, 0xa5, 0xa0, 0x93, 0xc2,
	0x3f, 0x50, 0xb0, 0xb3, 0xb1, 0xb4, 0x91, 0x37, 0x49, 0x58, 0xa3, 0xbb, 0x79, 0x21, 0x79, 0x0b,
	0xfa, 0x17, 0x76, 0xfe, 0x92, 0xe5, 0x96, 0x96, 0x32, 0xf3, 0x23, 0x62, 0x32, 0x03, 0x96, 0xf7,
	0x70, 0xe0, 0x72, 0x2f, 0x3f, 0xc9, 0x84, 0x09, 0x96, 0x4e, 0xaf, 0x7d, 0x70, 0x29, 0x77, 0x31,
	0x21, 0xa1, 0x90, 0x2f, 0x60, 0x5e, 0x61, 0x65, 0x01, 0x3b, 0x03, 0xc1, 0x07, 0xd7, 0x4d, 0xda,
	0xd9, 0x27, 0xe3, 0x8b, 0xfb, 0xa2, 0x0a, 0xc9, 0xf7, 0xc1, 0xda, 0xe4, 0x72, 0x96, 0xec, 0x94,
	0x9d, 0x1f, 0x3c, 0xcc, 0x51, 0x1c, 0xf2, 0xd6, 0x47, 0xd9, 0x16, 0xd8, 0xfa, 0x28, 0x14, 0xe7,
	0x84, 0x04, 0xab, 0x1c, 0xc1, 0x38, 0xb9, 0x53, 0xf8, 0x3f, 0x22, 0x2e, 0xf8, 0x71, 0xbf, 0x49,
	0xc1, 0xd9, 0x27, 0x83, 0x81, 0x12, 0x18, 0xca, 0x72, 0xb7, 0x58, 0x47, 0x95, 0xdf, 0xce, 0xf8,
	0xaf, 0xd4, 0x24, 0x07, 0x84, 0x49, 0xee, 0xd5, 0xd2, 0x29, 0xde, 0xdc, 0x7d, 0x0d, 0x8a, 0x6d,
	0x07, 0xc5, 0x7e, 0x06, 0xc5, 0x3e, 0x46, 0xd5, 0x6c, 0x47, 0xd5, 0x7c, 0x8f, 0xaa, 0x79, 0xbc,
	0x5c, 0x7a, 0x7a, 0xde, 0xf4, 0x9d, 0xc1, 0xb5, 0xae, 0xc3, 0xae, 0x2c, 0xa0, 0xae, 0xcb, 0xf4,
	0x9b, 0x9e, 0x2f, 0xa0, 0xf7, 0xe8, 0x72, 0xbf, 0x28, 0x17, 0x5c, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xe3, 0x34, 0xfe, 0x2e, 0x1a, 0x01, 0x00, 0x00,
}

func (m *Miners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Miners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Miners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMiners(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BurnedContracts) > 0 {
		i -= len(m.BurnedContracts)
		copy(dAtA[i:], m.BurnedContracts)
		i = encodeVarintMiners(dAtA, i, uint64(len(m.BurnedContracts)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Totalspace) > 0 {
		i -= len(m.Totalspace)
		copy(dAtA[i:], m.Totalspace)
		i = encodeVarintMiners(dAtA, i, uint64(len(m.Totalspace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintMiners(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMiners(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMiners(dAtA []byte, offset int, v uint64) int {
	offset -= sovMiners(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Miners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMiners(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMiners(uint64(l))
	}
	l = len(m.Totalspace)
	if l > 0 {
		n += 1 + l + sovMiners(uint64(l))
	}
	l = len(m.BurnedContracts)
	if l > 0 {
		n += 1 + l + sovMiners(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMiners(uint64(l))
	}
	return n
}

func sovMiners(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiners(x uint64) (n int) {
	return sovMiners(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Miners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiners
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Miners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Miners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Totalspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedContracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnedContracts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiners
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiners
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiners(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiners
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiners(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiners
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiners
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiners
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMiners
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMiners
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMiners        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiners          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMiners = fmt.Errorf("proto: unexpected end of group")
)
