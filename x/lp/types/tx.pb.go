// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lp/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateLPool struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Creator needs to deposit coins to create pool.
	// Input format:
	// "{amount0}{denomination},...,{amountN}{denominationN}"
	Coins []types.DecCoin `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins"`
	// AMM model id used to balance the pool.
	Amm_Id uint32 `protobuf:"varint,3,opt,name=amm_Id,json=ammId,proto3" json:"amm_Id,omitempty"`
	// Swap fee charged to swap transaction (swap x swap_fee_multi).
	// Is converted to type sdk.Dec
	SwapFeeMulti string `protobuf:"bytes,4,opt,name=swap_fee_multi,json=swapFeeMulti,proto3" json:"swap_fee_multi,omitempty"`
	// Liquidity pool token (LPToken) lock duration in seconds.
	// Liquidity provider's LPToken is locked when they contribute to a pool.
	// Penalty is applied when LPToken is burned before the lock duration is over.
	MinLockDuration int64 `protobuf:"varint,5,opt,name=min_lock_duration,json=minLockDuration,proto3" json:"min_lock_duration,omitempty"`
	// Penalty multiplier applied to LPToken when provider wishes to burn LPToken
	// before lock duration is over (LPToken x penalty_multi) -> pool_tokens.
	// Is converted to type sdk.Dec
	PenaltyMulti string `protobuf:"bytes,6,opt,name=penalty_multi,json=penaltyMulti,proto3" json:"penalty_multi,omitempty"`
}

func (m *MsgCreateLPool) Reset()         { *m = MsgCreateLPool{} }
func (m *MsgCreateLPool) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLPool) ProtoMessage()    {}
func (*MsgCreateLPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{0}
}
func (m *MsgCreateLPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLPool.Merge(m, src)
}
func (m *MsgCreateLPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLPool proto.InternalMessageInfo

func (m *MsgCreateLPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateLPool) GetCoins() []types.DecCoin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgCreateLPool) GetAmm_Id() uint32 {
	if m != nil {
		return m.Amm_Id
	}
	return 0
}

func (m *MsgCreateLPool) GetSwapFeeMulti() string {
	if m != nil {
		return m.SwapFeeMulti
	}
	return ""
}

func (m *MsgCreateLPool) GetMinLockDuration() int64 {
	if m != nil {
		return m.MinLockDuration
	}
	return 0
}

func (m *MsgCreateLPool) GetPenaltyMulti() string {
	if m != nil {
		return m.PenaltyMulti
	}
	return ""
}

type MsgCreateLPoolResponse struct {
	// Pool id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateLPoolResponse) Reset()         { *m = MsgCreateLPoolResponse{} }
func (m *MsgCreateLPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLPoolResponse) ProtoMessage()    {}
func (*MsgCreateLPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{1}
}
func (m *MsgCreateLPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLPoolResponse.Merge(m, src)
}
func (m *MsgCreateLPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLPoolResponse proto.InternalMessageInfo

func (m *MsgCreateLPoolResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgDepositLPool struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PoolName string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	// Input format:
	//"{amount0}{denomination},...,{amountN}{denominationN}"
	Coins []types.DecCoin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
	// The contributor can choose lock duration
	LockDuration int64 `protobuf:"varint,4,opt,name=lockDuration,proto3" json:"lockDuration,omitempty"`
}

func (m *MsgDepositLPool) Reset()         { *m = MsgDepositLPool{} }
func (m *MsgDepositLPool) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLPool) ProtoMessage()    {}
func (*MsgDepositLPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{2}
}
func (m *MsgDepositLPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLPool.Merge(m, src)
}
func (m *MsgDepositLPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLPool proto.InternalMessageInfo

func (m *MsgDepositLPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDepositLPool) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *MsgDepositLPool) GetCoins() []types.DecCoin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgDepositLPool) GetLockDuration() int64 {
	if m != nil {
		return m.LockDuration
	}
	return 0
}

type MsgDepositLPoolResponse struct {
	// Amount of shares given to pool contributor.
	Shares uint64 `protobuf:"varint,1,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *MsgDepositLPoolResponse) Reset()         { *m = MsgDepositLPoolResponse{} }
func (m *MsgDepositLPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLPoolResponse) ProtoMessage()    {}
func (*MsgDepositLPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{3}
}
func (m *MsgDepositLPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLPoolResponse.Merge(m, src)
}
func (m *MsgDepositLPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLPoolResponse proto.InternalMessageInfo

func (m *MsgDepositLPoolResponse) GetShares() uint64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

type MsgWithdrawLPool struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PoolName string `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	Shares   int64  `protobuf:"varint,3,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *MsgWithdrawLPool) Reset()         { *m = MsgWithdrawLPool{} }
func (m *MsgWithdrawLPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLPool) ProtoMessage()    {}
func (*MsgWithdrawLPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{4}
}
func (m *MsgWithdrawLPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLPool.Merge(m, src)
}
func (m *MsgWithdrawLPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLPool proto.InternalMessageInfo

func (m *MsgWithdrawLPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawLPool) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *MsgWithdrawLPool) GetShares() int64 {
	if m != nil {
		return m.Shares
	}
	return 0
}

type MsgWithdrawLPoolResponse struct {
}

func (m *MsgWithdrawLPoolResponse) Reset()         { *m = MsgWithdrawLPoolResponse{} }
func (m *MsgWithdrawLPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLPoolResponse) ProtoMessage()    {}
func (*MsgWithdrawLPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{5}
}
func (m *MsgWithdrawLPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLPoolResponse.Merge(m, src)
}
func (m *MsgWithdrawLPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLPoolResponse proto.InternalMessageInfo

type MsgSwap struct {
	Creator  string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PoolName string        `protobuf:"bytes,2,opt,name=poolName,proto3" json:"poolName,omitempty"`
	Coin     types.DecCoin `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{6}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

func (m *MsgSwap) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSwap) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *MsgSwap) GetCoin() types.DecCoin {
	if m != nil {
		return m.Coin
	}
	return types.DecCoin{}
}

type MsgSwapResponse struct {
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb876facf30080e2, []int{7}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLPool)(nil), "jackaldao.canine.lp.MsgCreateLPool")
	proto.RegisterType((*MsgCreateLPoolResponse)(nil), "jackaldao.canine.lp.MsgCreateLPoolResponse")
	proto.RegisterType((*MsgDepositLPool)(nil), "jackaldao.canine.lp.MsgDepositLPool")
	proto.RegisterType((*MsgDepositLPoolResponse)(nil), "jackaldao.canine.lp.MsgDepositLPoolResponse")
	proto.RegisterType((*MsgWithdrawLPool)(nil), "jackaldao.canine.lp.MsgWithdrawLPool")
	proto.RegisterType((*MsgWithdrawLPoolResponse)(nil), "jackaldao.canine.lp.MsgWithdrawLPoolResponse")
	proto.RegisterType((*MsgSwap)(nil), "jackaldao.canine.lp.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "jackaldao.canine.lp.MsgSwapResponse")
}

func init() { proto.RegisterFile("lp/tx.proto", fileDescriptor_bb876facf30080e2) }

var fileDescriptor_bb876facf30080e2 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xe3, 0x34, 0x85, 0xc9, 0x4f, 0xa9, 0x81, 0x62, 0x59, 0x95, 0x89, 0xdc, 0x20, 0x22,
	0xa0, 0xb6, 0x52, 0x24, 0xc4, 0x95, 0x36, 0x42, 0x2a, 0xaa, 0x11, 0x32, 0x07, 0x24, 0x2e, 0x66,
	0x63, 0x2f, 0xce, 0x12, 0xdb, 0x6b, 0x79, 0x1d, 0xd2, 0xbe, 0x05, 0x2f, 0xc1, 0xbb, 0xf4, 0xd8,
	0x23, 0x27, 0x84, 0x92, 0x37, 0xe0, 0x8e, 0x84, 0xbc, 0x76, 0xdc, 0xb8, 0x22, 0x10, 0xe0, 0xb6,
	0xf3, 0xf7, 0x7d, 0x33, 0xdf, 0xec, 0x2e, 0x34, 0xfc, 0xc8, 0x48, 0x4e, 0xf5, 0x28, 0xa6, 0x09,
	0x95, 0x6e, 0x7e, 0x40, 0xce, 0x18, 0xf9, 0x2e, 0xa2, 0xba, 0x83, 0x42, 0x12, 0x62, 0xdd, 0x8f,
	0x14, 0xd5, 0xa1, 0x2c, 0xa0, 0xcc, 0x18, 0x22, 0x86, 0x8d, 0x8f, 0xfd, 0x21, 0x4e, 0x50, 0xdf,
	0x70, 0x28, 0x09, 0xb3, 0x22, 0xe5, 0x96, 0x47, 0x3d, 0xca, 0x8f, 0x46, 0x7a, 0xca, 0xbc, 0xda,
	0x77, 0x01, 0xda, 0x26, 0xf3, 0x8e, 0x62, 0x8c, 0x12, 0x7c, 0xf2, 0x8a, 0x52, 0x5f, 0x92, 0x61,
	0xd3, 0x49, 0x4d, 0x1a, 0xcb, 0x42, 0x47, 0xe8, 0x5d, 0xb7, 0x16, 0xa6, 0xf4, 0x14, 0x36, 0x52,
	0x40, 0x26, 0x57, 0x3b, 0x62, 0xaf, 0x71, 0xb0, 0xab, 0x67, 0x94, 0x7a, 0x4a, 0xa9, 0xe7, 0x94,
	0xfa, 0x00, 0x3b, 0x47, 0x94, 0x84, 0x87, 0xb5, 0xf3, 0xaf, 0x77, 0x2b, 0x56, 0x56, 0x20, 0xdd,
	0x86, 0x3a, 0x0a, 0x02, 0xfb, 0xd8, 0x95, 0xc5, 0x8e, 0xd0, 0x6b, 0x59, 0x1b, 0x28, 0x08, 0x8e,
	0x5d, 0xa9, 0x0b, 0x6d, 0x36, 0x45, 0x91, 0xfd, 0x1e, 0x63, 0x3b, 0x98, 0xf8, 0x09, 0x91, 0x6b,
	0x9c, 0xb1, 0x99, 0x7a, 0x9f, 0x63, 0x6c, 0xa6, 0x3e, 0xe9, 0x01, 0x6c, 0x07, 0x24, 0xb4, 0x7d,
	0xea, 0x8c, 0x6d, 0x77, 0x12, 0xa3, 0x84, 0xd0, 0x50, 0xde, 0xe8, 0x08, 0x3d, 0xd1, 0xda, 0x0a,
	0x48, 0x78, 0x42, 0x9d, 0xf1, 0x20, 0x77, 0x4b, 0x7b, 0xd0, 0x8a, 0x70, 0x88, 0xfc, 0xe4, 0x2c,
	0x07, 0xac, 0x67, 0x80, 0xb9, 0x93, 0x03, 0x6a, 0x3d, 0xd8, 0x29, 0xcf, 0x6c, 0x61, 0x16, 0xd1,
	0x90, 0x61, 0xa9, 0x0d, 0x55, 0xe2, 0xe6, 0x63, 0x57, 0x89, 0xab, 0x7d, 0x16, 0x60, 0xcb, 0x64,
	0xde, 0x00, 0x47, 0x94, 0x91, 0xe4, 0x4f, 0xfa, 0x28, 0x70, 0x2d, 0xa2, 0xd4, 0x7f, 0x89, 0x02,
	0x2c, 0x57, 0x79, 0xa8, 0xb0, 0x2f, 0xb5, 0x13, 0xff, 0x56, 0x3b, 0x0d, 0x9a, 0xfe, 0xd2, 0x88,
	0x5c, 0x22, 0xd1, 0x2a, 0xf9, 0xb4, 0x3e, 0xdc, 0xb9, 0xd2, 0x66, 0x31, 0xd2, 0x0e, 0xd4, 0xd9,
	0x08, 0xc5, 0x98, 0xf1, 0x6e, 0x6b, 0x56, 0x6e, 0x69, 0xef, 0xe0, 0x86, 0xc9, 0xbc, 0x37, 0x24,
	0x19, 0xb9, 0x31, 0x9a, 0xfe, 0xcf, 0x68, 0x97, 0x0c, 0x22, 0x6f, 0x6d, 0xc1, 0xa0, 0x80, 0x7c,
	0x95, 0x61, 0xd1, 0x95, 0x36, 0x85, 0x4d, 0x93, 0x79, 0xaf, 0xa7, 0x28, 0xfa, 0x47, 0xd2, 0x27,
	0x50, 0x4b, 0xe5, 0xe1, 0x94, 0xeb, 0xc9, 0xc9, 0xf3, 0xb5, 0x6d, 0xbe, 0xd0, 0x94, 0x78, 0xd1,
	0xcb, 0xc1, 0x8f, 0x2a, 0x88, 0x26, 0xf3, 0x24, 0x1b, 0x1a, 0xcb, 0xef, 0x60, 0x4f, 0xff, 0xc5,
	0x33, 0xd3, 0xcb, 0x17, 0x47, 0x79, 0xb8, 0x46, 0x52, 0xb1, 0x8a, 0x21, 0x34, 0x4b, 0x37, 0xa9,
	0xbb, 0xaa, 0x78, 0x39, 0x4b, 0x79, 0xb4, 0x4e, 0x56, 0xc1, 0x81, 0xa1, 0x55, 0xde, 0xe9, 0xbd,
	0x55, 0xe5, 0xa5, 0x34, 0x65, 0x7f, 0xad, 0xb4, 0x82, 0xe6, 0x05, 0xd4, 0xf8, 0xf2, 0x76, 0x57,
	0x95, 0xa5, 0x51, 0xa5, 0xfb, 0xbb, 0xe8, 0x02, 0xeb, 0xf0, 0xd9, 0xf9, 0x4c, 0x15, 0x2e, 0x66,
	0xaa, 0xf0, 0x6d, 0xa6, 0x0a, 0x9f, 0xe6, 0x6a, 0xe5, 0x62, 0xae, 0x56, 0xbe, 0xcc, 0xd5, 0xca,
	0xdb, 0xfb, 0x1e, 0x49, 0x46, 0x93, 0xa1, 0xee, 0xd0, 0xc0, 0xc8, 0x90, 0xf6, 0x5d, 0x44, 0x8d,
	0x0c, 0xca, 0x38, 0x35, 0xd2, 0x4f, 0xf1, 0x2c, 0xc2, 0x6c, 0x58, 0xe7, 0xbf, 0xd9, 0xe3, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0x22, 0x39, 0x11, 0x27, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateLPool(ctx context.Context, in *MsgCreateLPool, opts ...grpc.CallOption) (*MsgCreateLPoolResponse, error)
	DepositLPool(ctx context.Context, in *MsgDepositLPool, opts ...grpc.CallOption) (*MsgDepositLPoolResponse, error)
	WithdrawLPool(ctx context.Context, in *MsgWithdrawLPool, opts ...grpc.CallOption) (*MsgWithdrawLPoolResponse, error)
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateLPool(ctx context.Context, in *MsgCreateLPool, opts ...grpc.CallOption) (*MsgCreateLPoolResponse, error) {
	out := new(MsgCreateLPoolResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.lp.Msg/CreateLPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositLPool(ctx context.Context, in *MsgDepositLPool, opts ...grpc.CallOption) (*MsgDepositLPoolResponse, error) {
	out := new(MsgDepositLPoolResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.lp.Msg/DepositLPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawLPool(ctx context.Context, in *MsgWithdrawLPool, opts ...grpc.CallOption) (*MsgWithdrawLPoolResponse, error) {
	out := new(MsgWithdrawLPoolResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.lp.Msg/WithdrawLPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/jackaldao.canine.lp.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateLPool(context.Context, *MsgCreateLPool) (*MsgCreateLPoolResponse, error)
	DepositLPool(context.Context, *MsgDepositLPool) (*MsgDepositLPoolResponse, error)
	WithdrawLPool(context.Context, *MsgWithdrawLPool) (*MsgWithdrawLPoolResponse, error)
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateLPool(ctx context.Context, req *MsgCreateLPool) (*MsgCreateLPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLPool not implemented")
}
func (*UnimplementedMsgServer) DepositLPool(ctx context.Context, req *MsgDepositLPool) (*MsgDepositLPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositLPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawLPool(ctx context.Context, req *MsgWithdrawLPool) (*MsgWithdrawLPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLPool not implemented")
}
func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateLPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.lp.Msg/CreateLPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLPool(ctx, req.(*MsgCreateLPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositLPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositLPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositLPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.lp.Msg/DepositLPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositLPool(ctx, req.(*MsgDepositLPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawLPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawLPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawLPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.lp.Msg/WithdrawLPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawLPool(ctx, req.(*MsgWithdrawLPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackaldao.canine.lp.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jackaldao.canine.lp.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLPool",
			Handler:    _Msg_CreateLPool_Handler,
		},
		{
			MethodName: "DepositLPool",
			Handler:    _Msg_DepositLPool_Handler,
		},
		{
			MethodName: "WithdrawLPool",
			Handler:    _Msg_WithdrawLPool_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lp/tx.proto",
}

func (m *MsgCreateLPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PenaltyMulti) > 0 {
		i -= len(m.PenaltyMulti)
		copy(dAtA[i:], m.PenaltyMulti)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PenaltyMulti)))
		i--
		dAtA[i] = 0x32
	}
	if m.MinLockDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinLockDuration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SwapFeeMulti) > 0 {
		i -= len(m.SwapFeeMulti)
		copy(dAtA[i:], m.SwapFeeMulti)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SwapFeeMulti)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amm_Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amm_Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositLPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockDuration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositLPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shares != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Shares))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shares != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Shares))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Amm_Id != 0 {
		n += 1 + sovTx(uint64(m.Amm_Id))
	}
	l = len(m.SwapFeeMulti)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinLockDuration != 0 {
		n += 1 + sovTx(uint64(m.MinLockDuration))
	}
	l = len(m.PenaltyMulti)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositLPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.LockDuration != 0 {
		n += 1 + sovTx(uint64(m.LockDuration))
	}
	return n
}

func (m *MsgDepositLPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shares != 0 {
		n += 1 + sovTx(uint64(m.Shares))
	}
	return n
}

func (m *MsgWithdrawLPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Shares != 0 {
		n += 1 + sovTx(uint64(m.Shares))
	}
	return n
}

func (m *MsgWithdrawLPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.DecCoin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amm_Id", wireType)
			}
			m.Amm_Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amm_Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeMulti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapFeeMulti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockDuration", wireType)
			}
			m.MinLockDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLockDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyMulti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PenaltyMulti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.DecCoin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			m.LockDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			m.Shares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			m.Shares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
