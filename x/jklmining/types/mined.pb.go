// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jklmining/mined.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mined struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Datasize string `protobuf:"bytes,2,opt,name=datasize,proto3" json:"datasize,omitempty"`
	Hash     string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Pcount   string `protobuf:"bytes,4,opt,name=pcount,proto3" json:"pcount,omitempty"`
}

func (m *Mined) Reset()         { *m = Mined{} }
func (m *Mined) String() string { return proto.CompactTextString(m) }
func (*Mined) ProtoMessage()    {}
func (*Mined) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6e4692bbcc34658, []int{0}
}
func (m *Mined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mined.Merge(m, src)
}
func (m *Mined) XXX_Size() int {
	return m.Size()
}
func (m *Mined) XXX_DiscardUnknown() {
	xxx_messageInfo_Mined.DiscardUnknown(m)
}

var xxx_messageInfo_Mined proto.InternalMessageInfo

func (m *Mined) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mined) GetDatasize() string {
	if m != nil {
		return m.Datasize
	}
	return ""
}

func (m *Mined) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Mined) GetPcount() string {
	if m != nil {
		return m.Pcount
	}
	return ""
}

func init() {
	proto.RegisterType((*Mined)(nil), "jackaldao.canine.jklmining.Mined")
}

func init() { proto.RegisterFile("jklmining/mined.proto", fileDescriptor_a6e4692bbcc34658) }

var fileDescriptor_a6e4692bbcc34658 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xca, 0xce, 0xc9,
	0xcd, 0xcc, 0xcb, 0xcc, 0x4b, 0xd7, 0xcf, 0xcd, 0xcc, 0x4b, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x92, 0xca, 0x4a, 0x4c, 0xce, 0x4e, 0xcc, 0x49, 0x49, 0xcc, 0xd7, 0x4b, 0x4e, 0xcc,
	0xcb, 0xcc, 0x4b, 0xd5, 0x83, 0xab, 0x53, 0x8a, 0xe7, 0x62, 0xf5, 0x05, 0x29, 0x15, 0xe2, 0xe3,
	0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x62, 0xca, 0x4c, 0x11, 0x92, 0xe2,
	0xe2, 0x48, 0x49, 0x2c, 0x49, 0x2c, 0xce, 0xac, 0x4a, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c,
	0x82, 0xf3, 0x85, 0x84, 0xb8, 0x58, 0x32, 0x12, 0x8b, 0x33, 0x24, 0x98, 0xc1, 0xe2, 0x60, 0xb6,
	0x90, 0x18, 0x17, 0x5b, 0x41, 0x72, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0x0b, 0x58, 0x14, 0xca, 0x73,
	0xf2, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xbd, 0xf4, 0xcc, 0x92,
	0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0x0b, 0x75, 0x53, 0x12, 0xf3, 0xf5, 0x21,
	0x4e, 0xd4, 0xaf, 0xd0, 0x47, 0x78, 0xa6, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x1b,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x5e, 0x54, 0x7d, 0xe6, 0x00, 0x00, 0x00,
}

func (m *Mined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pcount) > 0 {
		i -= len(m.Pcount)
		copy(dAtA[i:], m.Pcount)
		i = encodeVarintMined(dAtA, i, uint64(len(m.Pcount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMined(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Datasize) > 0 {
		i -= len(m.Datasize)
		copy(dAtA[i:], m.Datasize)
		i = encodeVarintMined(dAtA, i, uint64(len(m.Datasize)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMined(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMined(dAtA []byte, offset int, v uint64) int {
	offset -= sovMined(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMined(uint64(m.Id))
	}
	l = len(m.Datasize)
	if l > 0 {
		n += 1 + l + sovMined(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMined(uint64(l))
	}
	l = len(m.Pcount)
	if l > 0 {
		n += 1 + l + sovMined(uint64(l))
	}
	return n
}

func sovMined(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMined(x uint64) (n int) {
	return sovMined(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMined
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMined
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMined
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMined
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMined
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datasize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMined
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMined
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMined
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pcount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMined
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMined
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMined
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pcount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMined(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMined
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMined(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMined
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMined
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMined
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMined
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMined
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMined
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMined        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMined          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMined = fmt.Errorf("proto: unexpected end of group")
)
